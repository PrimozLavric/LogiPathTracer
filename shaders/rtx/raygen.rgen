#version 460
#extension GL_NV_ray_tracing : require
#extension GL_GOOGLE_include_directive : require


#include "uniforms.glsl"
#include "../common/ray.glsl"
#include "../common/random.glsl"

layout(location = 0) rayPayloadNV RayPayload payload;

Ray generateRay() {
  vec2 jitter;

  float r1 = 2.0 * rand();
  float r2 = 2.0 * rand();

  jitter.x = r1 < 1.0 ? sqrt(r1) - 1.0 : 1.0 - sqrt(2.0 - r1);
  jitter.y = r2 < 1.0 ? sqrt(r2) - 1.0 : 1.0 - sqrt(2.0 - r2);
  jitter /= (vec2(gl_LaunchSizeNV.xy) * 0.5);

  vec2 uv = 2.0 * vec2(gl_LaunchIDNV.xy) / vec2(gl_LaunchSizeNV.xy) - 1.0 + jitter;
  vec3 origin = ubo.camera.worldMatrix[3].xyz;

  float aspectRatio = float(gl_LaunchSizeNV.x) / float(gl_LaunchSizeNV.y);
  uv.x *= aspectRatio * tan(ubo.camera.fovY / 2.0);
  uv.y *= tan(ubo.camera.fovY / 2.0);

  vec3 rayDir = normalize(uv.x * ubo.camera.worldMatrix[0].xyz + uv.y * ubo.camera.worldMatrix[1].xyz - ubo.camera.worldMatrix[2].xyz);

  return Ray(origin, rayDir);
}

void main() {
  seed = uvec2(ubo.seed * gl_LaunchIDNV.xy);
  Ray ray = generateRay();

  // Initialize payload data.
  payload.mask = vec3(1.0f);
  payload.accColor = vec3(0.0f);
  payload.depth = 0;
  payload.seed = seed;

  traceNV(accelerator, gl_RayFlagsOpaqueNV, 0xff, 0, 0, 0, ray.origin, 0.001, ray.direction, 10000.0, 0);

  if (ubo.reset) {
      imageStore(accumulationImage, ivec2(gl_LaunchIDNV.xy), vec4(payload.accColor, 1.0));
  } else {
      imageStore(accumulationImage, ivec2(gl_LaunchIDNV.xy), imageLoad(accumulationImage, ivec2(gl_LaunchIDNV.xy)) + vec4(payload.accColor, 1.0));
  }
}
